//Yasar Mahomed Abbas
//213532609


#include <iostream>
#include <string>
#include <cmath>
#include "Fraction.h"
using namespace std;


void Fraction::simplify(int &nLCM, int &dLCM) {
int i = 1;
int lcm = 1;
while ((i <= abs(nLCM)) || (i <= dLCM)) { 
if (((nLCM % i) == 0) || ((nLCM % i) == 0))
lcm = i;
i++;
};
nLCM /= lcm;
dLCM /= lcm;
};


int Fraction::getNumerator() {
return num;
};
int Fraction::getDenominator() {
return den;
};
Fraction::Fraction() {
num = 0; den = 1;
};
void Fraction::print() {
int wholePart = (num / den) - (num % den) / denominator;
int printNumerator = num % den;
int printDenominator = den;
simplify(printDenominator, printNumerator);
cout << wholePart << "+" << printNumerator << "/" << printDenominator << endl;
};
void Fraction::add(Fraction B) { 
int addDen = den * B.getDenominator(); 
int addNum = num * B.getDenominator() + B.getNumerator() * den;
simplify(addNum, addDen);
};
void Fraction::subtract(Fraction B) { 
int subDen = den * B.getDenominator(); 
int subNum = num * B.getDenominator() - B.getNum() * den;
simplify(subDen, subNum);
};
void Fraction::multiply(Fraction B) { 
int multDen = denom * B.getDenominator();
int multNum = num * B.getNumerator();
simplify(multDen, multNum);
};
void Fraction::divide(Fraction B) {
int divDenom = denom * B.getNumerator();
int divNum = num * B.getDenominator();
simplify(divDen, divNum);
};
void Fraction::setNumerator(int numeratorSet) {
num = numeratorSet;
};
void Fraction::setDenominator(int denominatorSet) {
if (denominatorSet <= 0) 
return;
else
den = denominatorSet;
};
Fraction::~Fraction() {//default destructor
};
Fraction Fraction::operator+(const Fraction &B) {
Fraction temp;
int addDenominator = den * B.den;
int addNumerator = num * B.den + B.num * den;
simplify(addNumerator, addDenominator);
temp.setDenominator(addDenominator);
temp.setNumerator(addNumerator);
return temp;
};
Fraction Fraction::operator -(const Fraction &B) {
Fraction temp;
int subDenominator = den * B.den;
int subNumerator = num * B.den + B.num * den;
simplify(subNumerator, subDenominator);
temp.setDenominator(subDenominator);
temp.setNumerator(subNumerator);
return temp;
};
Fraction Fraction::operator *(const Fraction &B) {
Fraction temp;
int multDenominator = den * B.den;
int multNumerator = num * B.num;
simplify(multDenominator, multNumerator);
temp.setDenominator(multDenominator);
temp.setNumerator(multNumerator);
return temp;
};
Fraction Fraction::operator /(const Fraction &B) {
Fraction temp;
int divDenominator = den * B.num;
int divNumerator = num * B.den;
simplify(divDenominator, divNumerator);
temp.setDenominator(divDenominator);
temp.setNumerator(divNumerator);
return temp;
};

